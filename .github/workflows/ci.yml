name: CI

on:
  pull_request:
    paths:
      - "**.go"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/ci.yml"
      - "Makefile"

# Ensure that new CI runs cancel old ones on the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: make deps

      - name: Run tests with coverage
        run: make coverage

      - name: Build binary
        run: make build

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.out
          flags: unittests
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run golangci-lint with reviewdog
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_level: "error"
          filter_mode: "added"
          reporter: "github-check"

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run quality checks
        run: make quality

  ko-test:
    name: Ko Test Build
    runs-on: ubuntu-latest
    needs: [test, lint, quality]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Ko
        uses: ko-build/setup-ko@v0.7
      - name: Set version variables
        run: |
          VERSION="main-$(git rev-parse --short HEAD)"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
      - name: Test Ko build
        run: |
          ko build ./cmd/gitguard --local --platform=linux/amd64
